@model DowntimeRobot.Entity.Entity.Job
@using DowntimeRobot.Service.Enums
@{

    var isUpdate = Model != null ? (Model.Id > 0 ? true : false) : false;
    var apps = (IEnumerable<DowntimeRobot.Entity.Entity.Application>)ViewBag.AppList;

    ViewBag.Title = isUpdate ? "Update" : "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<header class="page-header">
    <h2>Şirket</h2>
</header>

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm(isUpdate ? "Edit" : "Create", "Job", FormMethod.Post))
        {
            if (isUpdate)
            {
                <input type="hidden" name="Id" value="@Model.Id" />
            }

            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <section class="card">
                <header class="card-header">
                    <h2 class="card-title">Job @(isUpdate ? "Update" : "Create")</h2>
                </header>
                <div class="card-body">

                    <div class="form-group row">
                        <label class="col-lg-3 control-label pt-2">Range Types</label>
                        <div class="col-md-9">
                            <select id="RangeType" name="RangeType" data-plugin-selectTwo class="form-control populate">
                                @foreach (var item in Enum.GetValues(typeof(MonitoringRangeType)).Cast<MonitoringRangeType>())
                                {
                                    var value = (int)item;
                                    <option value="@value" @(value == Model.AppId ? " selected " : "")>@item.ToString()</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-lg-3 control-label pt-2">Applications</label>
                        <div class="col-md-9">
                            <select id="AppId" name="AppId" data-plugin-selectTwo class="form-control populate">
                                @foreach (var item in apps)
                                {
                                    <option value="@item.Id" @(item.Id == Model.AppId ? " selected " : "")>@item.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.RangeValue, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.RangeValue, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Must be digit" } })
                            @Html.ValidationMessageFor(model => model.RangeValue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.ReqMaxLimit, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ReqMaxLimit, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Must be digit" } })
                            @Html.ValidationMessageFor(model => model.ReqMaxLimit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            <input class="form-control text-box single-line" data-val="true" data-val-date="The field StartDate must be a date." data-val-required="The StartDate field is required." id="StartDate" name="StartDate" placeholder="12.09.2020 04:11" required="required" type="datetime" value="@DateTime.Now.AddHours(1).ToString("dd.MM.yyyy hh:mm")">

                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @if (isUpdate)
                    {
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @required = "required" } });
                                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                </div>
                <footer class="card-footer">
                    <!-- end: page -->
                    <div class="btn btn-default pull-left">
                        @Html.ActionLink("Back to List", "Index")
                    </div>

                    <button type="submit" class="btn btn-primary pull-right">@(isUpdate ? "Update" : "Create") </button>
                </footer>
            </section>

        }
    </div>
</div>
