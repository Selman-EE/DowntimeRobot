@model DowntimeRobot.Entity.Entity.Application
@{

    var isUpdate = Model != null ? (Model.Id > 0 ? true : false) : false;
    var userSession = (DowntimeRobot.Entity.Entity.User)Session["UserData"];
    int userId = Model.UserId <= 0 ? userSession.Id : Model.UserId;

    ViewBag.Title = isUpdate ? "Update" : "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<header class="page-header">
    <h2>Şirket</h2>
</header>

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm(isUpdate ? "Edit" : "Create", "Application", FormMethod.Post))
        {
            if (isUpdate)
            {
                <input type="hidden" name="Id" value="@Model.Id" />
            }
            <input type="hidden" name="UserId" value="@userId" />


            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <section class="card">
                <header class="card-header">
                    <h2 class="card-title">Application @(isUpdate ? "Update" : "Create")</h2>
                </header>
                <div class="card-body">

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Must be upper case" } })
                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "col-lg-3 control-label pt-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", @required = "required" } });
                            @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <footer class="card-footer">
                    <!-- end: page -->
                    <div class="btn btn-default pull-left">
                        @Html.ActionLink("Back to List", "Index")
                    </div>

                    <button type="submit" class="btn btn-primary pull-right">@(isUpdate ? "Update" : "Create") </button>
                </footer>
            </section>

        }
    </div>
</div>
